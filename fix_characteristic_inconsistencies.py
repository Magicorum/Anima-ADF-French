#!/usr/bin/env python3
"""
Script pour corriger toutes les incohÃ©rences entre l'affichage des caractÃ©ristiques et les modificateurs
"""

import re

def fix_characteristic_inconsistencies():
    # Lire le fichier
    with open('templates/actor/features.hbs', 'r', encoding='utf-8') as f:
        content = f.read()

    print("ðŸ”§ Correction des incohÃ©rences caractÃ©ristiques/modificateurs...")

    # DÃ©finir les corrections nÃ©cessaires
    corrections = [
        # willpower.mod -> will.mod (pour VOL)
        ('willpower.mod', 'will.mod'),
        # power.mod -> strength.mod (pour FOR)
        ('power.mod', 'strength.mod'),
        # power.mod -> dexterity.mod (pour DEX)
        ('power.mod', 'dexterity.mod'),
        # power.mod -> agility.mod (pour AGI)
        ('power.mod', 'agility.mod')
    ]

    # Appliquer les corrections de maniÃ¨re sÃ©lective
    for old_mod, new_mod in corrections:
        # Trouver les contextes oÃ¹ la correction doit Ãªtre appliquÃ©e
        if old_mod == 'willpower.mod':
            # Remplacer willpower.mod par will.mod
            content = content.replace('willpower.mod', 'will.mod')
            print(f"   âœ… willpower.mod â†’ will.mod")
            
        elif old_mod == 'power.mod':
            # Pour power.mod, on doit Ãªtre plus sÃ©lectif
            # Chercher les contextes oÃ¹ power.mod est utilisÃ© incorrectement
            
            # Pattern pour trouver les contextes oÃ¹ power.mod est utilisÃ© avec FOR, DEX, AGI
            patterns = [
                # FOR avec power.mod -> strength.mod
                (r'(<span class=\'skill-base-char[^\']*\'>FOR</span>.*?<span class=\'skill-char-mod\'>\+{{[^}]*power\.mod[^}]*}})', 
                 lambda m: m.group(1).replace('power.mod', 'strength.mod')),
                
                # DEX avec power.mod -> dexterity.mod
                (r'(<span class=\'skill-base-char[^\']*\'>DEX</span>.*?<span class=\'skill-char-mod\'>\+{{[^}]*power\.mod[^}]*}})', 
                 lambda m: m.group(1).replace('power.mod', 'dexterity.mod')),
                
                # AGI avec power.mod -> agility.mod
                (r'(<span class=\'skill-base-char[^\']*\'>AGI</span>.*?<span class=\'skill-char-mod\'>\+{{[^}]*power\.mod[^}]*}})', 
                 lambda m: m.group(1).replace('power.mod', 'agility.mod'))
            ]
            
            for pattern, replacement_func in patterns:
                content = re.sub(pattern, replacement_func, content, flags=re.DOTALL)
            
            print(f"   âœ… power.mod â†’ strength.mod (pour FOR)")
            print(f"   âœ… power.mod â†’ dexterity.mod (pour DEX)")
            print(f"   âœ… power.mod â†’ agility.mod (pour AGI)")

    # Ã‰crire le fichier modifiÃ©
    with open('templates/actor/features.hbs', 'w', encoding='utf-8') as f:
        f.write(content)

    print("âœ… Toutes les incohÃ©rences ont Ã©tÃ© corrigÃ©es !")
    print("ðŸŽ‰ Les caractÃ©ristiques affichÃ©es correspondent maintenant Ã  leurs modificateurs")

if __name__ == "__main__":
    fix_characteristic_inconsistencies()
